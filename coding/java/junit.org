#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+INCLUDE: "../../layout/template.org"
#+SETUPFILE: "../../layout/extension.org"
#+title:

* Р§зг
#+BEGIN_SRC java
  // Caculator.java
  public class Caculator {
      public double add(double a, double b){
          return a+b;
      }
  }
  
  // CaculatorTest.java
  import static org.junit.Assert.*;
  
  import org.junit.Test;
  
  public class CaculatorTest {
  
      @Test
      public void test() {
          Caculator cal = new Caculator();
          assertEquals(4, cal.add(1,2), 0);
      }
  
  }
  
  // ParameterizedTest.java
  import static org.junit.Assert.*;
  
  import java.util.Arrays;
  import java.util.Collection;
  
  import org.junit.Test;
  import org.junit.runner.RunWith;
  import org.junit.runners.Parameterized;
  import org.junit.runners.Parameterized.Parameters;
  
  @RunWith(value=Parameterized.class)
  public class ParameterizedTest {
      private double expected, valuea, valueb;
      
      public ParameterizedTest(double expected, double valuea, double valueb) {
          this.expected = expected;
          this.valuea = valuea;
          this.valueb = valueb;
      }
  
      @Parameters
      public static Collection<Integer[]> getTestParameters(){
          return Arrays.asList(new Integer[][]{
                  {3, 1, 2},
                  {4, 1, 2}
          });
      }
      
      @Test
      public void sum(){
          Caculator cal = new Caculator();
          assertEquals(expected, cal.add(valuea, valueb), 0);
      }
  
  }
  
  // TestAll.java
  import static org.junit.Assert.*;
  
  import org.junit.Test;
  import org.junit.runner.RunWith;
  import org.junit.runners.Suite;
  import org.junit.runners.Suite.SuiteClasses;
  
  @RunWith(Suite.class)
  @SuiteClasses(value={CaculatorTest.class, ParameterizedTest.class})
  public class TestAll {
  
  }
#+END_SRC
